{"ast":null,"code":"import { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Directive, Inject, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { Subject, merge } from 'rxjs';\nimport { filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport * as i2 from '@angular/cdk/platform';\nimport { trigger, transition, style, animate } from '@angular/animations';\nconst _c0 = [\"*\"];\n\nclass NgxNavbarDynamicExpandDirective {\n  constructor(viewportRuler, elRef, ngZone, cdRef, platform, _document) {\n    this.viewportRuler = viewportRuler;\n    this.elRef = elRef;\n    this.ngZone = ngZone;\n    this.cdRef = cdRef;\n    this.platform = platform;\n    this._document = _document;\n    this.onDestroy$ = new Subject();\n    this.update$ = new Subject();\n    this.loaded = false;\n    this._isExpanded = false;\n    this.ngZone.runOutsideAngular(() => {\n      merge(this.viewportRuler.change(150), this.update$).pipe(filter(() => this.loaded || (this.loaded = checkBootstrapStylesAreLoaded(this._document, this.elRef.nativeElement))), map(() => {\n        const element = this.elRef.nativeElement;\n        let overflowSize;\n\n        if (this.isExpanded) {\n          overflowSize = element.scrollWidth - element.offsetWidth;\n        } else {\n          const clone = element.cloneNode(true);\n          clone.classList.add('navbar-expand');\n          const parent = element.parentElement;\n\n          if (parent) {\n            parent.appendChild(clone);\n            overflowSize = clone.scrollWidth - clone.offsetWidth;\n            parent.removeChild(clone);\n          }\n        }\n\n        return !overflowSize;\n      }), distinctUntilChanged(), takeUntil(this.onDestroy$)).subscribe(isExpanded => {\n        this.ngZone.run(() => {\n          this._isExpanded = isExpanded;\n          this.cdRef.markForCheck();\n        });\n      });\n    });\n  }\n\n  get isExpanded() {\n    return this._isExpanded;\n  }\n\n  ngAfterContentInit() {\n    if (!this.platform.isBrowser) {\n      return;\n    }\n\n    this.ngZone.runOutsideAngular(() => {\n      this.loaded = checkBootstrapStylesAreLoaded(this._document, this.elRef.nativeElement);\n\n      if (this.loaded) {\n        this.update$.next();\n      } else {\n        setTimeout(() => {\n          this.ngAfterContentInit();\n        }, 1000 / 60);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.update$.complete();\n    this.onDestroy$.next();\n    this.onDestroy$.complete();\n  }\n\n}\n\nNgxNavbarDynamicExpandDirective.ɵfac = function NgxNavbarDynamicExpandDirective_Factory(t) {\n  return new (t || NgxNavbarDynamicExpandDirective)(i0.ɵɵdirectiveInject(i1.ViewportRuler), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.Platform), i0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nNgxNavbarDynamicExpandDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NgxNavbarDynamicExpandDirective,\n  selectors: [[\"\", \"ngxNavbarDynamicExpand\", \"\"]],\n  hostAttrs: [1, \"navbar\", \"text-nowrap\"],\n  hostVars: 2,\n  hostBindings: function NgxNavbarDynamicExpandDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"navbar-expand\", ctx.isExpanded);\n    }\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxNavbarDynamicExpandDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxNavbarDynamicExpand]',\n      host: {\n        class: 'navbar text-nowrap',\n        '[class.navbar-expand]': 'isExpanded'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i1.ViewportRuler\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i2.Platform\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\nfunction checkBootstrapStylesAreLoaded(document, element) {\n  const documentWindow = document.defaultView || window;\n  const computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(element) : false;\n  return computedStyle && computedStyle.whiteSpace === 'nowrap';\n}\n/** Time and timing curve for navbar animations. */\n\n\nconst NAVBAR_ANIMATION_TIMING = '300ms ease-out';\nconst ngxNavbarAnimations = {\n  navbarSlide: trigger('slideState', [transition('false => true', [style({\n    opacity: 0,\n    height: 0,\n    overflow: 'hidden'\n  }), animate(NAVBAR_ANIMATION_TIMING, style({\n    opacity: 1,\n    height: '*'\n  }))]), transition('true => false', [animate(NAVBAR_ANIMATION_TIMING, style({\n    display: 'block',\n    opacity: 0,\n    height: 0,\n    overflow: 'hidden'\n  }))])])\n};\n\nclass NgxNavbarCollapseComponent {\n  constructor(cdRef) {\n    this.cdRef = cdRef;\n    this.isCollapsed = true;\n    this.isTransitioning = false;\n  }\n\n  toggle() {\n    this.isTransitioning = true;\n    this.isCollapsed = !this.isCollapsed;\n    this.cdRef.markForCheck();\n  }\n\n  close() {\n    if (this.isCollapsed) {\n      return;\n    }\n\n    this.isTransitioning = true;\n    this.isCollapsed = true;\n    this.cdRef.markForCheck();\n  }\n\n  open() {\n    if (!this.isCollapsed) {\n      return;\n    }\n\n    this.isTransitioning = true;\n    this.isCollapsed = false;\n    this.cdRef.markForCheck();\n  }\n\n}\n\nNgxNavbarCollapseComponent.ɵfac = function NgxNavbarCollapseComponent_Factory(t) {\n  return new (t || NgxNavbarCollapseComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nNgxNavbarCollapseComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxNavbarCollapseComponent,\n  selectors: [[\"ngx-navbar-collapse\"]],\n  hostAttrs: [1, \"navbar-collapse\", \"ngx-navbar-collapse\"],\n  hostVars: 7,\n  hostBindings: function NgxNavbarCollapseComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵsyntheticHostListener(\"@slideState.done\", function NgxNavbarCollapseComponent_animation_slideState_done_HostBindingHandler() {\n        return ctx.isTransitioning = false;\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵsyntheticHostProperty(\"@slideState\", !ctx.isCollapsed);\n      i0.ɵɵclassProp(\"collapse\", !ctx.isTransitioning)(\"show\", !ctx.isCollapsed && !ctx.isTransitioning)(\"collapsing\", ctx.isTransitioning);\n    }\n  },\n  exportAs: [\"ngxNavbarCollapse\"],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function NgxNavbarCollapseComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  styles: [\".ngx-navbar-collapse.collapsing{height:auto}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [ngxNavbarAnimations.navbarSlide]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxNavbarCollapseComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-navbar-collapse',\n      template: `\n    <ng-content></ng-content>\n  `,\n      styles: [`\n      .ngx-navbar-collapse.collapsing {\n        height: auto;\n      }\n    `],\n      host: {\n        class: 'navbar-collapse ngx-navbar-collapse',\n        '[class.collapse]': '!isTransitioning',\n        '[class.show]': '!isCollapsed && !isTransitioning',\n        '[class.collapsing]': 'isTransitioning',\n        '[@slideState]': '!isCollapsed',\n        '(@slideState.done)': 'isTransitioning = false'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [ngxNavbarAnimations.navbarSlide],\n      exportAs: 'ngxNavbarCollapse'\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n\nclass NgxNavbarModule {}\n\nNgxNavbarModule.ɵfac = function NgxNavbarModule_Factory(t) {\n  return new (t || NgxNavbarModule)();\n};\n\nNgxNavbarModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxNavbarModule\n});\nNgxNavbarModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxNavbarModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective],\n      imports: [CommonModule],\n      exports: [NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of ngx-bootstrap-navbar\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { NAVBAR_ANIMATION_TIMING, NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective, NgxNavbarModule, ngxNavbarAnimations };","map":{"version":3,"sources":["/Users/noctis/Desktop/portfolio/node_modules/ngx-bootstrap-navbar/fesm2015/ngx-bootstrap-navbar.mjs"],"names":["DOCUMENT","CommonModule","i0","Directive","Inject","Component","ViewEncapsulation","ChangeDetectionStrategy","NgModule","Subject","merge","filter","map","distinctUntilChanged","takeUntil","i1","i2","trigger","transition","style","animate","NgxNavbarDynamicExpandDirective","constructor","viewportRuler","elRef","ngZone","cdRef","platform","_document","onDestroy$","update$","loaded","_isExpanded","runOutsideAngular","change","pipe","checkBootstrapStylesAreLoaded","nativeElement","element","overflowSize","isExpanded","scrollWidth","offsetWidth","clone","cloneNode","classList","add","parent","parentElement","appendChild","removeChild","subscribe","run","markForCheck","ngAfterContentInit","isBrowser","next","setTimeout","ngOnDestroy","complete","ɵfac","ViewportRuler","ElementRef","NgZone","ChangeDetectorRef","Platform","ɵdir","type","args","selector","host","class","Document","decorators","document","documentWindow","defaultView","window","computedStyle","getComputedStyle","whiteSpace","NAVBAR_ANIMATION_TIMING","ngxNavbarAnimations","navbarSlide","opacity","height","overflow","display","NgxNavbarCollapseComponent","isCollapsed","isTransitioning","toggle","close","open","ɵcmp","template","styles","encapsulation","None","changeDetection","OnPush","animations","exportAs","NgxNavbarModule","ɵmod","ɵinj","declarations","imports","exports"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,YAAnB,QAAuC,iBAAvC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,SAA5B,EAAuCC,iBAAvC,EAA0DC,uBAA1D,EAAmFC,QAAnF,QAAmG,eAAnG;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,MAA/B;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,oBAAtB,EAA4CC,SAA5C,QAA6D,gBAA7D;AACA,OAAO,KAAKC,EAAZ,MAAoB,wBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,uBAApB;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,KAA9B,EAAqCC,OAArC,QAAoD,qBAApD;;;AAEA,MAAMC,+BAAN,CAAsC;AAClCC,EAAAA,WAAW,CAACC,aAAD,EAAgBC,KAAhB,EAAuBC,MAAvB,EAA+BC,KAA/B,EAAsCC,QAAtC,EAAgDC,SAAhD,EAA2D;AAClE,SAAKL,aAAL,GAAqBA,aAArB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,UAAL,GAAkB,IAAIpB,OAAJ,EAAlB;AACA,SAAKqB,OAAL,GAAe,IAAIrB,OAAJ,EAAf;AACA,SAAKsB,MAAL,GAAc,KAAd;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKP,MAAL,CAAYQ,iBAAZ,CAA8B,MAAM;AAChCvB,MAAAA,KAAK,CAAC,KAAKa,aAAL,CAAmBW,MAAnB,CAA0B,GAA1B,CAAD,EAAiC,KAAKJ,OAAtC,CAAL,CACKK,IADL,CACUxB,MAAM,CAAC,MAAM,KAAKoB,MAAL,KAClB,KAAKA,MAAL,GAAcK,6BAA6B,CAAC,KAAKR,SAAN,EAAiB,KAAKJ,KAAL,CAAWa,aAA5B,CADzB,CAAP,CADhB,EAE8FzB,GAAG,CAAC,MAAM;AACpG,cAAM0B,OAAO,GAAG,KAAKd,KAAL,CAAWa,aAA3B;AACA,YAAIE,YAAJ;;AACA,YAAI,KAAKC,UAAT,EAAqB;AACjBD,UAAAA,YAAY,GAAGD,OAAO,CAACG,WAAR,GAAsBH,OAAO,CAACI,WAA7C;AACH,SAFD,MAGK;AACD,gBAAMC,KAAK,GAAGL,OAAO,CAACM,SAAR,CAAkB,IAAlB,CAAd;AACAD,UAAAA,KAAK,CAACE,SAAN,CAAgBC,GAAhB,CAAoB,eAApB;AACA,gBAAMC,MAAM,GAAGT,OAAO,CAACU,aAAvB;;AACA,cAAID,MAAJ,EAAY;AACRA,YAAAA,MAAM,CAACE,WAAP,CAAmBN,KAAnB;AACAJ,YAAAA,YAAY,GAAGI,KAAK,CAACF,WAAN,GAAoBE,KAAK,CAACD,WAAzC;AACAK,YAAAA,MAAM,CAACG,WAAP,CAAmBP,KAAnB;AACH;AACJ;;AACD,eAAO,CAACJ,YAAR;AACH,OAjBgG,CAFjG,EAmBI1B,oBAAoB,EAnBxB,EAmB4BC,SAAS,CAAC,KAAKe,UAAN,CAnBrC,EAoBKsB,SApBL,CAoBgBX,UAAD,IAAgB;AAC3B,aAAKf,MAAL,CAAY2B,GAAZ,CAAgB,MAAM;AAClB,eAAKpB,WAAL,GAAmBQ,UAAnB;AACA,eAAKd,KAAL,CAAW2B,YAAX;AACH,SAHD;AAIH,OAzBD;AA0BH,KA3BD;AA4BH;;AACa,MAAVb,UAAU,GAAG;AACb,WAAO,KAAKR,WAAZ;AACH;;AACDsB,EAAAA,kBAAkB,GAAG;AACjB,QAAI,CAAC,KAAK3B,QAAL,CAAc4B,SAAnB,EAA8B;AAC1B;AACH;;AACD,SAAK9B,MAAL,CAAYQ,iBAAZ,CAA8B,MAAM;AAChC,WAAKF,MAAL,GAAcK,6BAA6B,CAAC,KAAKR,SAAN,EAAiB,KAAKJ,KAAL,CAAWa,aAA5B,CAA3C;;AACA,UAAI,KAAKN,MAAT,EAAiB;AACb,aAAKD,OAAL,CAAa0B,IAAb;AACH,OAFD,MAGK;AACDC,QAAAA,UAAU,CAAC,MAAM;AACb,eAAKH,kBAAL;AACH,SAFS,EAEP,OAAO,EAFA,CAAV;AAGH;AACJ,KAVD;AAWH;;AACDI,EAAAA,WAAW,GAAG;AACV,SAAK5B,OAAL,CAAa6B,QAAb;AACA,SAAK9B,UAAL,CAAgB2B,IAAhB;AACA,SAAK3B,UAAL,CAAgB8B,QAAhB;AACH;;AAhEiC;;AAkEtCtC,+BAA+B,CAACuC,IAAhC;AAAA,mBAA4HvC,+BAA5H,EAAkHnB,EAAlH,mBAA6Ka,EAAE,CAAC8C,aAAhL,GAAkH3D,EAAlH,mBAA0MA,EAAE,CAAC4D,UAA7M,GAAkH5D,EAAlH,mBAAoOA,EAAE,CAAC6D,MAAvO,GAAkH7D,EAAlH,mBAA0PA,EAAE,CAAC8D,iBAA7P,GAAkH9D,EAAlH,mBAA2Rc,EAAE,CAACiD,QAA9R,GAAkH/D,EAAlH,mBAAmTF,QAAnT;AAAA;;AACAqB,+BAA+B,CAAC6C,IAAhC,kBADkHhE,EAClH;AAAA,QAAgHmB,+BAAhH;AAAA;AAAA;AAAA;AAAA;AAAA;AADkHnB,MAAAA,EAClH;AAAA;AAAA;AAAA;;AACA;AAAA,qDAFkHA,EAElH,mBAA2FmB,+BAA3F,EAAwI,CAAC;AAC7H8C,IAAAA,IAAI,EAAEhE,SADuH;AAE7HiE,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,0BADX;AAECC,MAAAA,IAAI,EAAE;AACFC,QAAAA,KAAK,EAAE,oBADL;AAEF,iCAAyB;AAFvB;AAFP,KAAD;AAFuH,GAAD,CAAxI,EAS4B,YAAY;AAChC,WAAO,CAAC;AAAEJ,MAAAA,IAAI,EAAEpD,EAAE,CAAC8C;AAAX,KAAD,EAA6B;AAAEM,MAAAA,IAAI,EAAEjE,EAAE,CAAC4D;AAAX,KAA7B,EAAsD;AAAEK,MAAAA,IAAI,EAAEjE,EAAE,CAAC6D;AAAX,KAAtD,EAA2E;AAAEI,MAAAA,IAAI,EAAEjE,EAAE,CAAC8D;AAAX,KAA3E,EAA2G;AAAEG,MAAAA,IAAI,EAAEnD,EAAE,CAACiD;AAAX,KAA3G,EAAkI;AAAEE,MAAAA,IAAI,EAAEK,QAAR;AAAkBC,MAAAA,UAAU,EAAE,CAAC;AACxJN,QAAAA,IAAI,EAAE/D,MADkJ;AAExJgE,QAAAA,IAAI,EAAE,CAACpE,QAAD;AAFkJ,OAAD;AAA9B,KAAlI,CAAP;AAIH,GAdL;AAAA;;AAeA,SAASoC,6BAAT,CAAuCsC,QAAvC,EAAiDpC,OAAjD,EAA0D;AACtD,QAAMqC,cAAc,GAAGD,QAAQ,CAACE,WAAT,IAAwBC,MAA/C;AACA,QAAMC,aAAa,GAAGH,cAAc,IAAIA,cAAc,CAACI,gBAAjC,GAChBJ,cAAc,CAACI,gBAAf,CAAgCzC,OAAhC,CADgB,GAEhB,KAFN;AAGA,SAAOwC,aAAa,IAAIA,aAAa,CAACE,UAAd,KAA6B,QAArD;AACH;AAED;;;AACA,MAAMC,uBAAuB,GAAG,gBAAhC;AACA,MAAMC,mBAAmB,GAAG;AACxBC,EAAAA,WAAW,EAAElE,OAAO,CAAC,YAAD,EAAe,CAC/BC,UAAU,CAAC,eAAD,EAAkB,CACxBC,KAAK,CAAC;AACFiE,IAAAA,OAAO,EAAE,CADP;AAEFC,IAAAA,MAAM,EAAE,CAFN;AAGFC,IAAAA,QAAQ,EAAE;AAHR,GAAD,CADmB,EAMxBlE,OAAO,CAAC6D,uBAAD,EAA0B9D,KAAK,CAAC;AACnCiE,IAAAA,OAAO,EAAE,CAD0B;AAEnCC,IAAAA,MAAM,EAAE;AAF2B,GAAD,CAA/B,CANiB,CAAlB,CADqB,EAY/BnE,UAAU,CAAC,eAAD,EAAkB,CACxBE,OAAO,CAAC6D,uBAAD,EAA0B9D,KAAK,CAAC;AACnCoE,IAAAA,OAAO,EAAE,OAD0B;AAEnCH,IAAAA,OAAO,EAAE,CAF0B;AAGnCC,IAAAA,MAAM,EAAE,CAH2B;AAInCC,IAAAA,QAAQ,EAAE;AAJyB,GAAD,CAA/B,CADiB,CAAlB,CAZqB,CAAf;AADI,CAA5B;;AAwBA,MAAME,0BAAN,CAAiC;AAC7BlE,EAAAA,WAAW,CAACI,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAK+D,WAAL,GAAmB,IAAnB;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,SAAKD,eAAL,GAAuB,IAAvB;AACA,SAAKD,WAAL,GAAmB,CAAC,KAAKA,WAAzB;AACA,SAAK/D,KAAL,CAAW2B,YAAX;AACH;;AACDuC,EAAAA,KAAK,GAAG;AACJ,QAAI,KAAKH,WAAT,EAAsB;AAClB;AACH;;AACD,SAAKC,eAAL,GAAuB,IAAvB;AACA,SAAKD,WAAL,GAAmB,IAAnB;AACA,SAAK/D,KAAL,CAAW2B,YAAX;AACH;;AACDwC,EAAAA,IAAI,GAAG;AACH,QAAI,CAAC,KAAKJ,WAAV,EAAuB;AACnB;AACH;;AACD,SAAKC,eAAL,GAAuB,IAAvB;AACA,SAAKD,WAAL,GAAmB,KAAnB;AACA,SAAK/D,KAAL,CAAW2B,YAAX;AACH;;AA1B4B;;AA4BjCmC,0BAA0B,CAAC5B,IAA3B;AAAA,mBAAuH4B,0BAAvH,EA/EkHtF,EA+ElH,mBAAmKA,EAAE,CAAC8D,iBAAtK;AAAA;;AACAwB,0BAA0B,CAACM,IAA3B,kBAhFkH5F,EAgFlH;AAAA,QAA2GsF,0BAA3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAhFkHtF,MAAAA,EAgFlH;AAAA,qCAA6H,KAA7H;AAAA;AAAA;;AAAA;AAhFkHA,MAAAA,EAgFlH;AAhFkHA,MAAAA,EAgFlH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhFkHA,MAAAA,EAgFlH;AAhFkHA,MAAAA,EAiF9G,gBADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAE6F,CAACgF,mBAAmB,CAACC,WAArB;AAF7F;AAAA;AAAA;;AAGA;AAAA,qDAnFkHjF,EAmFlH,mBAA2FsF,0BAA3F,EAAmI,CAAC;AACxHrB,IAAAA,IAAI,EAAE9D,SADkH;AAExH+D,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,QAAQ,EAAE,qBADX;AAEC0B,MAAAA,QAAQ,EAAG;AAC/B;AACA,GAJmB;AAKCC,MAAAA,MAAM,EAAE,CACH;AACzB;AACA;AACA;AACA,KAL4B,CALT;AAYC1B,MAAAA,IAAI,EAAE;AACFC,QAAAA,KAAK,EAAE,qCADL;AAEF,4BAAoB,kBAFlB;AAGF,wBAAgB,kCAHd;AAIF,8BAAsB,iBAJpB;AAKF,yBAAiB,cALf;AAMF,8BAAsB;AANpB,OAZP;AAoBC0B,MAAAA,aAAa,EAAE3F,iBAAiB,CAAC4F,IApBlC;AAqBCC,MAAAA,eAAe,EAAE5F,uBAAuB,CAAC6F,MArB1C;AAsBCC,MAAAA,UAAU,EAAE,CAACnB,mBAAmB,CAACC,WAArB,CAtBb;AAuBCmB,MAAAA,QAAQ,EAAE;AAvBX,KAAD;AAFkH,GAAD,CAAnI,EA2B4B,YAAY;AAAE,WAAO,CAAC;AAAEnC,MAAAA,IAAI,EAAEjE,EAAE,CAAC8D;AAAX,KAAD,CAAP;AAA0C,GA3BpF;AAAA;;AA6BA,MAAMuC,eAAN,CAAsB;;AAEtBA,eAAe,CAAC3C,IAAhB;AAAA,mBAA4G2C,eAA5G;AAAA;;AACAA,eAAe,CAACC,IAAhB,kBAnHkHtG,EAmHlH;AAAA,QAA6GqG;AAA7G;AACAA,eAAe,CAACE,IAAhB,kBApHkHvG,EAoHlH;AAAA,YAAwI,CAACD,YAAD,CAAxI;AAAA;;AACA;AAAA,qDArHkHC,EAqHlH,mBAA2FqG,eAA3F,EAAwH,CAAC;AAC7GpC,IAAAA,IAAI,EAAE3D,QADuG;AAE7G4D,IAAAA,IAAI,EAAE,CAAC;AACCsC,MAAAA,YAAY,EAAE,CAAClB,0BAAD,EAA6BnE,+BAA7B,CADf;AAECsF,MAAAA,OAAO,EAAE,CAAC1G,YAAD,CAFV;AAGC2G,MAAAA,OAAO,EAAE,CAACpB,0BAAD,EAA6BnE,+BAA7B;AAHV,KAAD;AAFuG,GAAD,CAAxH;AAAA;AASA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAAS4D,uBAAT,EAAkCO,0BAAlC,EAA8DnE,+BAA9D,EAA+FkF,eAA/F,EAAgHrB,mBAAhH","sourcesContent":["import { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Directive, Inject, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { Subject, merge } from 'rxjs';\nimport { filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport * as i2 from '@angular/cdk/platform';\nimport { trigger, transition, style, animate } from '@angular/animations';\n\nclass NgxNavbarDynamicExpandDirective {\r\n    constructor(viewportRuler, elRef, ngZone, cdRef, platform, _document) {\r\n        this.viewportRuler = viewportRuler;\r\n        this.elRef = elRef;\r\n        this.ngZone = ngZone;\r\n        this.cdRef = cdRef;\r\n        this.platform = platform;\r\n        this._document = _document;\r\n        this.onDestroy$ = new Subject();\r\n        this.update$ = new Subject();\r\n        this.loaded = false;\r\n        this._isExpanded = false;\r\n        this.ngZone.runOutsideAngular(() => {\r\n            merge(this.viewportRuler.change(150), this.update$)\r\n                .pipe(filter(() => this.loaded ||\r\n                (this.loaded = checkBootstrapStylesAreLoaded(this._document, this.elRef.nativeElement))), map(() => {\r\n                const element = this.elRef.nativeElement;\r\n                let overflowSize;\r\n                if (this.isExpanded) {\r\n                    overflowSize = element.scrollWidth - element.offsetWidth;\r\n                }\r\n                else {\r\n                    const clone = element.cloneNode(true);\r\n                    clone.classList.add('navbar-expand');\r\n                    const parent = element.parentElement;\r\n                    if (parent) {\r\n                        parent.appendChild(clone);\r\n                        overflowSize = clone.scrollWidth - clone.offsetWidth;\r\n                        parent.removeChild(clone);\r\n                    }\r\n                }\r\n                return !overflowSize;\r\n            }), distinctUntilChanged(), takeUntil(this.onDestroy$))\r\n                .subscribe((isExpanded) => {\r\n                this.ngZone.run(() => {\r\n                    this._isExpanded = isExpanded;\r\n                    this.cdRef.markForCheck();\r\n                });\r\n            });\r\n        });\r\n    }\r\n    get isExpanded() {\r\n        return this._isExpanded;\r\n    }\r\n    ngAfterContentInit() {\r\n        if (!this.platform.isBrowser) {\r\n            return;\r\n        }\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.loaded = checkBootstrapStylesAreLoaded(this._document, this.elRef.nativeElement);\r\n            if (this.loaded) {\r\n                this.update$.next();\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    this.ngAfterContentInit();\r\n                }, 1000 / 60);\r\n            }\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this.update$.complete();\r\n        this.onDestroy$.next();\r\n        this.onDestroy$.complete();\r\n    }\r\n}\r\nNgxNavbarDynamicExpandDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxNavbarDynamicExpandDirective, deps: [{ token: i1.ViewportRuler }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i2.Platform }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\r\nNgxNavbarDynamicExpandDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: NgxNavbarDynamicExpandDirective, selector: \"[ngxNavbarDynamicExpand]\", host: { properties: { \"class.navbar-expand\": \"isExpanded\" }, classAttribute: \"navbar text-nowrap\" }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxNavbarDynamicExpandDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[ngxNavbarDynamicExpand]',\r\n                    host: {\r\n                        class: 'navbar text-nowrap',\r\n                        '[class.navbar-expand]': 'isExpanded',\r\n                    },\r\n                }]\r\n        }], ctorParameters: function () {\r\n        return [{ type: i1.ViewportRuler }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i2.Platform }, { type: Document, decorators: [{\r\n                        type: Inject,\r\n                        args: [DOCUMENT]\r\n                    }] }];\r\n    } });\r\nfunction checkBootstrapStylesAreLoaded(document, element) {\r\n    const documentWindow = document.defaultView || window;\r\n    const computedStyle = documentWindow && documentWindow.getComputedStyle\r\n        ? documentWindow.getComputedStyle(element)\r\n        : false;\r\n    return computedStyle && computedStyle.whiteSpace === 'nowrap';\r\n}\n\n/** Time and timing curve for navbar animations. */\r\nconst NAVBAR_ANIMATION_TIMING = '300ms ease-out';\r\nconst ngxNavbarAnimations = {\r\n    navbarSlide: trigger('slideState', [\r\n        transition('false => true', [\r\n            style({\r\n                opacity: 0,\r\n                height: 0,\r\n                overflow: 'hidden'\r\n            }),\r\n            animate(NAVBAR_ANIMATION_TIMING, style({\r\n                opacity: 1,\r\n                height: '*'\r\n            }))\r\n        ]),\r\n        transition('true => false', [\r\n            animate(NAVBAR_ANIMATION_TIMING, style({\r\n                display: 'block',\r\n                opacity: 0,\r\n                height: 0,\r\n                overflow: 'hidden'\r\n            }))\r\n        ])\r\n    ])\r\n};\n\nclass NgxNavbarCollapseComponent {\r\n    constructor(cdRef) {\r\n        this.cdRef = cdRef;\r\n        this.isCollapsed = true;\r\n        this.isTransitioning = false;\r\n    }\r\n    toggle() {\r\n        this.isTransitioning = true;\r\n        this.isCollapsed = !this.isCollapsed;\r\n        this.cdRef.markForCheck();\r\n    }\r\n    close() {\r\n        if (this.isCollapsed) {\r\n            return;\r\n        }\r\n        this.isTransitioning = true;\r\n        this.isCollapsed = true;\r\n        this.cdRef.markForCheck();\r\n    }\r\n    open() {\r\n        if (!this.isCollapsed) {\r\n            return;\r\n        }\r\n        this.isTransitioning = true;\r\n        this.isCollapsed = false;\r\n        this.cdRef.markForCheck();\r\n    }\r\n}\r\nNgxNavbarCollapseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxNavbarCollapseComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\r\nNgxNavbarCollapseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.0\", type: NgxNavbarCollapseComponent, selector: \"ngx-navbar-collapse\", host: { listeners: { \"@slideState.done\": \"isTransitioning = false\" }, properties: { \"class.collapse\": \"!isTransitioning\", \"class.show\": \"!isCollapsed && !isTransitioning\", \"class.collapsing\": \"isTransitioning\", \"@slideState\": \"!isCollapsed\" }, classAttribute: \"navbar-collapse ngx-navbar-collapse\" }, exportAs: [\"ngxNavbarCollapse\"], ngImport: i0, template: `\r\n    <ng-content></ng-content>\r\n  `, isInline: true, styles: [\".ngx-navbar-collapse.collapsing{height:auto}\\n\"], animations: [ngxNavbarAnimations.navbarSlide], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxNavbarCollapseComponent, decorators: [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'ngx-navbar-collapse',\r\n                    template: `\r\n    <ng-content></ng-content>\r\n  `,\r\n                    styles: [\r\n                        `\r\n      .ngx-navbar-collapse.collapsing {\r\n        height: auto;\r\n      }\r\n    `\r\n                    ],\r\n                    host: {\r\n                        class: 'navbar-collapse ngx-navbar-collapse',\r\n                        '[class.collapse]': '!isTransitioning',\r\n                        '[class.show]': '!isCollapsed && !isTransitioning',\r\n                        '[class.collapsing]': 'isTransitioning',\r\n                        '[@slideState]': '!isCollapsed',\r\n                        '(@slideState.done)': 'isTransitioning = false'\r\n                    },\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    animations: [ngxNavbarAnimations.navbarSlide],\r\n                    exportAs: 'ngxNavbarCollapse'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; } });\n\nclass NgxNavbarModule {\r\n}\r\nNgxNavbarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxNavbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nNgxNavbarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxNavbarModule, declarations: [NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective], imports: [CommonModule], exports: [NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective] });\r\nNgxNavbarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxNavbarModule, imports: [[CommonModule]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: NgxNavbarModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective],\r\n                    imports: [CommonModule],\r\n                    exports: [NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective]\r\n                }]\r\n        }] });\n\n/*\r\n * Public API Surface of ngx-bootstrap-navbar\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NAVBAR_ANIMATION_TIMING, NgxNavbarCollapseComponent, NgxNavbarDynamicExpandDirective, NgxNavbarModule, ngxNavbarAnimations };\n"]},"metadata":{},"sourceType":"module"}